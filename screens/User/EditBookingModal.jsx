import React, { useState, useEffect } from "react";
import axios from "axios";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  FlatList,
  Image,
  Modal,
  StyleSheet,
  ScrollView, // Th√™m ScrollView
  Alert, // Th√™m Alert ƒë·ªÉ th√¥ng b√°o l·ªói
} from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage"; // Import AsyncStorage
import DateTimePicker from "@react-native-community/datetimepicker";
const EditBookingModal = ({ booking, onClose, onSave }) => {
  const [updatedBooking, setUpdatedBooking] = useState({
    ...booking,
    selectedDishes: booking.selectedDishes || [],
    // Chuy·ªÉn ƒë·ªïi date sang string n·∫øu n√≥ l√† Date object, gi·ªØ nguy√™n n·∫øu l√† string
    date:
      booking.date instanceof Date
        ? booking.date.toISOString().split("T")[0]
        : booking.date,
  });

  const [menuList, setMenuList] = useState([]);
  const [currentTotalAmount, setCurrentTotalAmount] = useState(0);
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [showTimePicker, setShowTimePicker] = useState(false);

  const API_BASE_URL =
    process.env.VITE_API_BASE_URL || "http://192.168.1.11:5000";

  // H√†m t√≠nh t·ªïng ti·ªÅn (t∆∞∆°ng t·ª± nh∆∞ trong BookingHistory)
  const calculateTotalAmount = (selectedDishes) => {
    if (!selectedDishes || selectedDishes.length === 0) return 0;

    return selectedDishes.reduce((total, dishItem) => {
      // L·∫•y gi√° t·ª´ dishId ho·∫∑c tr·ª±c ti·∫øp t·ª´ dishItem
      const price =
        dishItem.dishId && typeof dishItem.dishId === "object"
          ? dishItem.dishId.price
          : dishItem.price;

      // Chuy·ªÉn price t·ª´ chu·ªói sang s·ªë (n·∫øu l√† chu·ªói)
      const priceNumber = typeof price === "string" ? parseFloat(price) : price;

      // Ki·ªÉm tra price v√† quantity c√≥ ph·∫£i l√† s·ªë h·ª£p l·ªá kh√¥ng
      if (
        typeof priceNumber === "number" &&
        !isNaN(priceNumber) &&
        typeof dishItem.quantity === "number" &&
        !isNaN(dishItem.quantity)
      ) {
        return total + priceNumber * dishItem.quantity;
      }
      return total;
    }, 0);
  };

  useEffect(() => {
    const fetchMenu = async () => {
      try {
        const res = await axios.get(`${API_BASE_URL}/api/menus`);
        setMenuList(res.data);
      } catch (err) {
        console.error(
          "‚ùå L·ªói khi l·∫•y danh s√°ch m√≥n ƒÉn:",
          err.response?.data || err.message
        );
        Alert.alert("L·ªói", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch m√≥n ƒÉn.");
      }
    };
    fetchMenu();
  }, []);

  // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn hi·ªán t·∫°i m·ªói khi selectedDishes thay ƒë·ªïi
  useEffect(() => {
    const total = calculateTotalAmount(updatedBooking.selectedDishes);
    setCurrentTotalAmount(total);
  }, [updatedBooking.selectedDishes]);

  const handleChange = (name, value) => {
    setUpdatedBooking((prev) => ({
      ...prev,
      [name]: name === "people" ? (value === "" ? "" : Number(value)) : value,
    }));
  };

  const handleAddDish = (dish) => {
    const alreadyAdded = updatedBooking.selectedDishes.some(
      (d) => d.dishId._id === dish._id
    );
    if (!alreadyAdded) {
      setUpdatedBooking((prev) => ({
        ...prev,
        selectedDishes: [
          ...prev.selectedDishes,
          {
            dishId: dish, // dish object bao g·ªìm _id, name, price, image
            quantity: 1,
          },
        ],
      }));
    } else {
      // T√πy ch·ªçn: Th√¥ng b√°o m√≥n ƒë√£ ƒë∆∞·ª£c th√™m ho·∫∑c t·ª± ƒë·ªông tƒÉng s·ªë l∆∞·ª£ng
      Alert.alert("Th√¥ng b√°o", "M√≥n n√†y ƒë√£ c√≥ trong danh s√°ch.");
    }
  };

  const handleRemoveDish = (dishIdToRemove) => {
    setUpdatedBooking((prev) => ({
      ...prev,
      selectedDishes: prev.selectedDishes.filter(
        (item) => item.dishId._id !== dishIdToRemove
      ),
    }));
  };

  const handleQuantityChange = (dishIdToChange, quantityText) => {
    const quantity = Number(quantityText);
    if (isNaN(quantity) || quantity < 0) return; // Kh√¥ng cho ph√©p s·ªë l∆∞·ª£ng √¢m ho·∫∑c kh√¥ng ph·∫£i s·ªë

    setUpdatedBooking((prev) => ({
      ...prev,
      selectedDishes: prev.selectedDishes.map((item) =>
        item.dishId._id === dishIdToChange
          ? { ...item, quantity: quantity }
          : item
      ),
    }));
  };

  const handleSave = async () => {
    // Ki·ªÉm tra d·ªØ li·ªáu c∆° b·∫£n
    if (
      !updatedBooking.date ||
      !updatedBooking.time ||
      !updatedBooking.people ||
      updatedBooking.people <= 0
    ) {
      Alert.alert(
        "Th√¥ng tin kh√¥ng h·ª£p l·ªá",
        "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin Ng√†y, Th·ªùi gian v√† S·ªë ng∆∞·ªùi (l·ªõn h∆°n 0)."
      );
      return;
    }

    try {
      const token = await AsyncStorage.getItem("token"); // S·ª≠ d·ª•ng AsyncStorage
      if (!token) {
        Alert.alert(
          "L·ªói",
          "Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."
        );
        return;
      }

      const finalTotalAmount = calculateTotalAmount(
        updatedBooking.selectedDishes
      );
      const bookingDataToSend = {
        ...updatedBooking,
        people: Number(updatedBooking.people), // ƒê·∫£m b·∫£o people l√† s·ªë
        totalAmount: finalTotalAmount, // G·ª≠i totalAmount ƒë√£ t√≠nh to√°n
      };

      await axios.put(
        `${API_BASE_URL}/api/bookings/${updatedBooking._id}`,
        bookingDataToSend,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      onSave(bookingDataToSend); // Truy·ªÅn d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t (bao g·ªìm totalAmount) cho parent
    } catch (err) {
      console.error(
        "‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë·∫∑t b√†n:",
        err.response?.data || err.message
      );
      Alert.alert(
        "L·ªói c·∫≠p nh·∫≠t",
        err.response?.data?.message ||
          "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë·∫∑t b√†n. Vui l√≤ng th·ª≠ l·∫°i."
      );
    }
  };

  return (
    <Modal
      animationType="slide"
      transparent={true}
      visible={true} // Vi·ªác hi·ªÉn th·ªã modal n√†y ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi parent component
      onRequestClose={onClose}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          <ScrollView showsVerticalScrollIndicator={false}>
            <Text style={styles.title}>Ch·ªânh s·ª≠a ƒê·∫∑t B√†n</Text>

            <Text style={styles.label}>Ng√†y</Text>
            <TouchableOpacity
              onPress={() => setShowDatePicker(true)}
              style={styles.input}
            >
              <Text>{updatedBooking.date || "Ch·ªçn ng√†y"}</Text>
            </TouchableOpacity>

            {showDatePicker && (
              <DateTimePicker
                value={
                  updatedBooking.date
                    ? new Date(updatedBooking.date)
                    : new Date()
                }
                mode="date"
                display="default"
                onChange={(event, selectedDate) => {
                  setShowDatePicker(false);
                  if (selectedDate) {
                    const formatted = selectedDate.toISOString().split("T")[0];
                    handleChange("date", formatted);
                  }
                }}
              />
            )}

            <Text style={styles.label}>Th·ªùi gian</Text>
            <TouchableOpacity
              onPress={() => setShowTimePicker(true)}
              style={styles.input}
            >
              <Text>{updatedBooking.time || "Ch·ªçn gi·ªù"}</Text>
            </TouchableOpacity>

            {showTimePicker && (
              <DateTimePicker
                value={
                  updatedBooking.time
                    ? new Date(`2000-01-01T${updatedBooking.time}`)
                    : new Date()
                }
                mode="time"
                is24Hour={true}
                display="default"
                onChange={(event, selectedTime) => {
                  setShowTimePicker(false);
                  if (selectedTime) {
                    const hours = selectedTime
                      .getHours()
                      .toString()
                      .padStart(2, "0");
                    const minutes = selectedTime
                      .getMinutes()
                      .toString()
                      .padStart(2, "0");
                    handleChange("time", `${hours}:${minutes}`);
                  }
                }}
              />
            )}

            <Text style={styles.label}>S·ªë ng∆∞·ªùi</Text>
            <TextInput
              style={styles.input}
              value={String(updatedBooking.people)}
              onChangeText={(text) => handleChange("people", text)}
              keyboardType="numeric"
              placeholder="Nh·∫≠p s·ªë ng∆∞·ªùi"
            />

            <Text style={styles.label}>Ghi ch√∫</Text>
            <TextInput
              style={styles.textarea}
              value={updatedBooking.note || ""}
              onChangeText={(text) => handleChange("note", text)}
              multiline={true}
              placeholder="Nh·∫≠p ghi ch√∫ (n·∫øu c√≥)"
            />

            <Text style={styles.subTitle}>üçΩÔ∏è M√≥n ƒÉn ƒë√£ ch·ªçn:</Text>
            {updatedBooking.selectedDishes.length === 0 ? (
              <Text style={styles.emptyText}>Ch∆∞a ch·ªçn m√≥n n√†o.</Text>
            ) : (
              <FlatList
                data={updatedBooking.selectedDishes}
                keyExtractor={(item) => item.dishId._id.toString()}
                renderItem={({ item }) => (
                  <View style={styles.selectedDishItem}>
                    <Image
                      source={{
                        uri:
                          item.dishId.image ||
                          "https://via.placeholder.com/50?text=No+Img",
                      }}
                      style={styles.selectedDishImage}
                    />
                    <View style={styles.selectedDishInfo}>
                      <Text
                        style={styles.selectedDishName}
                        numberOfLines={1}
                        ellipsizeMode="tail"
                      >
                        {item.dishId.name}
                      </Text>
                      <Text style={styles.selectedDishPrice}>
                        {item.dishId.price
                          ? `${item.dishId.price.toLocaleString("vi-VN")} ƒë`
                          : "N/A"}
                      </Text>
                    </View>
                    <TextInput
                      style={styles.quantityInput}
                      value={String(item.quantity)}
                      onChangeText={(text) =>
                        handleQuantityChange(item.dishId._id, text)
                      }
                      keyboardType="numeric"
                    />
                    <TouchableOpacity
                      onPress={() => handleRemoveDish(item.dishId._id)}
                      style={styles.removeButton}
                    >
                      <Text style={styles.removeButtonText}>X√≥a</Text>
                    </TouchableOpacity>
                  </View>
                )}
                scrollEnabled={false} // FlatList n√†y kh√¥ng c·∫ßn cu·ªôn ri√™ng
              />
            )}
            <Text style={styles.runningTotalText}>
              T·ªïng ti·ªÅn m√≥n: {currentTotalAmount.toLocaleString("vi-VN")} ƒë
            </Text>

            <Text style={styles.subTitle}>üßæ Danh s√°ch m√≥n ƒÉn (Menu):</Text>
            {menuList.length === 0 ? (
              <Text style={styles.emptyText}>
                Kh√¥ng c√≥ m√≥n ƒÉn n√†o trong menu.
              </Text>
            ) : (
              <FlatList
                data={menuList}
                keyExtractor={(item) => item._id.toString()}
                numColumns={2} // Hi·ªÉn th·ªã 2 m√≥n m·ªói h√†ng
                columnWrapperStyle={styles.menuRow} // Style cho m·ªói h√†ng
                renderItem={({ item }) => (
                  <TouchableOpacity
                    style={styles.menuItem}
                    onPress={() => handleAddDish(item)}
                  >
                    <Image
                      source={{
                        uri:
                          item.image ||
                          "https://via.placeholder.com/80?text=No+Img",
                      }}
                      style={styles.menuItemImage}
                    />
                    <Text
                      style={styles.menuItemName}
                      numberOfLines={2}
                      ellipsizeMode="tail"
                    >
                      {item.name}
                    </Text>
                    <Text style={styles.menuItemPrice}>
                      {item.price
                        ? `${item.price.toLocaleString("vi-VN")} ƒë`
                        : "N/A"}
                    </Text>
                  </TouchableOpacity>
                )}
                scrollEnabled={false} // FlatList n√†y kh√¥ng c·∫ßn cu·ªôn ri√™ng
              />
            )}
            <View style={styles.buttons}>
              <TouchableOpacity
                onPress={onClose}
                style={[styles.buttonBase, styles.closeButton]}
              >
                <Text style={styles.buttonText}>ƒê√≥ng</Text>
              </TouchableOpacity>
              <TouchableOpacity
                onPress={handleSave}
                style={[styles.buttonBase, styles.saveButton]}
              >
                <Text style={styles.buttonText}>L∆∞u thay ƒë·ªïi</Text>
              </TouchableOpacity>
            </View>
          </ScrollView>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0, 0, 0, 0.6)", // TƒÉng ƒë·ªô m·ªù
  },
  modalContent: {
    backgroundColor: "white",
    padding: 20,
    borderRadius: 15, // Bo tr√≤n h∆°n
    width: "90%",
    maxHeight: "90%", // Gi·ªõi h·∫°n chi·ªÅu cao t·ªëi ƒëa
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  title: {
    fontSize: 22, // TƒÉng k√≠ch th∆∞·ªõc
    fontWeight: "bold",
    marginBottom: 20, // TƒÉng kho·∫£ng c√°ch
    textAlign: "center",
    color: "#333",
  },
  label: {
    fontSize: 16,
    marginBottom: 8, // TƒÉng kho·∫£ng c√°ch
    color: "#555",
    fontWeight: "500",
  },
  input: {
    height: 45, // TƒÉng chi·ªÅu cao
    borderColor: "#ddd", // M√†u border nh·∫°t h∆°n
    borderWidth: 1,
    marginBottom: 15, // TƒÉng kho·∫£ng c√°ch
    paddingHorizontal: 12, // TƒÉng padding
    borderRadius: 8, // Bo tr√≤n h∆°n
    backgroundColor: "#f9f9f9", // N·ªÅn nh·∫°t
  },
  textarea: {
    minHeight: 100, // Chi·ªÅu cao t·ªëi thi·ªÉu
    borderColor: "#ddd",
    borderWidth: 1,
    marginBottom: 15,
    paddingHorizontal: 12,
    paddingTop: 10, // Padding top cho text area
    borderRadius: 8,
    backgroundColor: "#f9f9f9",
    textAlignVertical: "top",
  },
  subTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginTop: 25, // TƒÉng kho·∫£ng c√°ch
    marginBottom: 10, // Th√™m kho·∫£ng c√°ch d∆∞·ªõi
    color: "#333",
    borderBottomWidth: 1,
    borderBottomColor: "#eee",
    paddingBottom: 5,
  },
  selectedDishItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 8, // Th√™m padding d·ªçc
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0", // ƒê∆∞·ªùng k·∫ª nh·∫°t h∆°n
  },
  selectedDishImage: {
    width: 50, // TƒÉng k√≠ch th∆∞·ªõc
    height: 50,
    borderRadius: 8, // Bo tr√≤n nh·∫π
    marginRight: 10,
  },
  selectedDishInfo: {
    flex: 1, // Cho ph√©p chi·∫øm kh√¥ng gian c√≤n l·∫°i
    justifyContent: "center",
  },
  selectedDishName: {
    fontSize: 15,
    fontWeight: "500",
    color: "#333",
  },
  selectedDishPrice: {
    fontSize: 13,
    color: "#666",
  },
  quantityInput: {
    width: 45, // TƒÉng chi·ªÅu r·ªông
    height: 35, // TƒÉng chi·ªÅu cao
    borderColor: "#ccc",
    borderWidth: 1,
    paddingHorizontal: 5, // Th√™m padding ngang
    borderRadius: 5,
    textAlign: "center",
    marginHorizontal: 10, // Th√™m kho·∫£ng c√°ch ngang
    fontSize: 14,
  },
  removeButton: {
    padding: 8, // TƒÉng v√πng ch·∫°m
  },
  removeButtonText: {
    color: "#ef4444", // M√†u ƒë·ªè
    fontSize: 13,
    fontWeight: "500",
  },
  runningTotalText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "green",
    marginTop: 10,
    marginBottom: 15,
    textAlign: "right",
  },
  menuRow: {
    justifyContent: "space-between", // C√°ch ƒë·ªÅu c√°c item trong h√†ng
  },
  menuItem: {
    width: "48%", // Cho 2 c·ªôt v·ªõi kho·∫£ng c√°ch nh·ªè
    marginBottom: 15, // TƒÉng kho·∫£ng c√°ch
    alignItems: "center",
    backgroundColor: "#f9f9f9", // N·ªÅn nh·∫°t
    borderRadius: 8,
    padding: 10,
    borderWidth: 1,
    borderColor: "#eee",
  },
  menuItemImage: {
    width: 80, // TƒÉng k√≠ch th∆∞·ªõc
    height: 80,
    borderRadius: 8, // Bo tr√≤n nh·∫π
    marginBottom: 8, // TƒÉng kho·∫£ng c√°ch
  },
  menuItemName: {
    fontSize: 14, // TƒÉng k√≠ch th∆∞·ªõc
    fontWeight: "500",
    textAlign: "center",
    color: "#444",
    marginBottom: 4,
  },
  menuItemPrice: {
    fontSize: 13,
    color: "green",
    fontWeight: "bold",
  },
  buttons: {
    flexDirection: "row",
    justifyContent: "space-around", // C√°ch ƒë·ªÅu c√°c n√∫t
    marginTop: 30, // TƒÉng kho·∫£ng c√°ch
    paddingBottom: 10, // Th√™m padding d∆∞·ªõi ƒë·ªÉ kh√¥ng s√°t ƒë√°y modal khi cu·ªôn
  },
  buttonBase: {
    // Ki·ªÉu c∆° s·ªü cho n√∫t
    paddingVertical: 12, // TƒÉng padding d·ªçc
    paddingHorizontal: 20, // TƒÉng padding ngang
    borderRadius: 8, // Bo tr√≤n h∆°n
    minWidth: 120, // Chi·ªÅu r·ªông t·ªëi thi·ªÉu
    alignItems: "center",
  },
  closeButton: {
    backgroundColor: "#6c757d", // M√†u x√°m ƒë·∫≠m h∆°n
  },
  saveButton: {
    backgroundColor: "#28a745", // M√†u xanh l√° ƒë·∫≠m h∆°n
  },
  buttonText: {
    color: "white",
    fontWeight: "bold",
    fontSize: 16, // TƒÉng k√≠ch th∆∞·ªõc ch·ªØ
  },
  emptyText: {
    textAlign: "center",
    color: "#777",
    marginVertical: 10,
    fontSize: 14,
  },
});

export default EditBookingModal;
